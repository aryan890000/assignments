/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const app = express();

const port = 3000;
app.use(bodyParser.json());
app.use(express.urlencoded({ extended: false }));

app.get("/todos", (req, res) => {
  fs.readFile("./todos.json","utf-8", (err, data) => {
    if (err) return res.json({ error: "Error to Fetch Todos" });
    console.log(data);
     if (!data) return res.status(404).json({ error: "TODO are Empty" });
    const TODOs = JSON.parse(data);
    return res.json(TODOs);
  });
});

app.get("/todos/:id", (req, res) => {
  const id = req.params.id;
  fs.readFile("./todos.json","utf-8", (err, data) => {
    if (err) return res.json({ error: "Error to Fetch Todos" });
    if(!data) return res.json({error: "TODO are Empty"})
    const TODOs = JSON.parse(data);

    const todoByID = TODOs.filter((todo) => todo.id === id);

    if (!todoByID) return res.json({ Error: "Invalid TODO ID" });
    return res.json(todoByID);
  });
});

app.post("/todos", (req, res) => {
  const { id, title, description, completed } = req.body;
  const todo = { id, title, description, completed };

  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) return res.json({ error: "Error to Fetch Todos" });
    let TODOs;
    if (!data) {
      TODOs = [];
      TODOs.push(todo);
    } else {
      TODOs = JSON.parse(data);
      TODOs.push(todo);
    }

    fs.writeFile("./todos.json", JSON.stringify(TODOs), (err) => {
      if (err) return res.json({ error: "Error to POST Todos" });

      return res.json({ msg: "TODO Added" });
    });
  });
});

app.put("/todos/:id", (req, res) => {
  var id = req.params.id;

  const Updatetodo = { ...req.body };
  let check = false;
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) return res.json({ error: "Error to Fetch Todos" });
    if (!data) return res.json({ error: "TODO are Empty" });
    let TODOs = JSON.parse(data);
    TODOs = TODOs.map((todo) => {
      if (id === todo.id) {
        check = true;
        return Updatetodo;
      } else return todo;
    });
    if (!check) res.json({ Error: "Invalid TODO ID" });

    fs.writeFile("./todos.json", JSON.stringify(TODOs), (err) => {
      if (err) return res.json({ error: "Error to POST Todos" });

      res.json({ mag: "TODO Updated" });
    });
  });
});

app.delete("/todos/:id", (req, res) => {
  const id = req.params.id;
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) return res.json({ error: "Error to Fetch Todos" });
    if (!data) return res.json({ error: "TODO are Empty" });
    let TODOs = JSON.parse(data);
    let length = TODOs.length;

    TODOs = TODOs.filter((todo) => todo.id !== id);

    if (length === TODOs.length) return res.json({ error: "Invalid TODO ID" });

    fs.writeFile("./todos.json", JSON.stringify(TODOs), (err) => {
      if (err) return res.json({ error: "Error to POST Todos" });

      res.json({ msg: "TODO Delted sucessfully" });
    });
  });
});

app.listen(port, () => {
  console.log("App listening on port ", port);
});

module.exports = app;
